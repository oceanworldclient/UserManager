@using UserManager.Blazor.State
@inject ManageClient ManageClient


<MContainer Fluid>
    <MDataIterator Items="PanelState.Users"
                   ItemsPerPage="_itemsPerPage"
                   TItem="UserDto"
                   ItemKey="it => it.Id.ToString()"
                   HideDefaultFooter>
        <HeaderContent>
            <MToolbar Class="mb-1"
                      Color="blue darken-3"
                      Dark>
                <MTextField @bind-Value="_searchString"
                            Clearable
                            Flat
                            SoloInverted
                            HideDetails="true"
                            PrependInnerIcon="mdi-magnify"
                            Label="Search"/>
                <MSpacer/>
                <MSelect @bind-Value="PanelState.QueryType"
                         Flat
                         SoloInverted
                         HideDetails="true"
                         Items="Keys"
                         ItemValue="r => r.Type"
                         ItemText="r => r.Label"
                         TValue="QueryUserDto.QueryType"
                         Value="QueryUserDto.QueryType.Email"/>
                <MSpacer/>
                <MButton Large Depressed Color="blue" Loading="_isLoading" Disabled="_isLoading" OnClick="Search"></MButton>
            </MToolbar>
        </HeaderContent>
        <ChildContent Context="props">
            <MRow>
                @foreach (var item in props.Items)
                {
                    <MCol @key="item.Email"
                          Cols="12"
                          Sm="6"
                          Md="4"
                          Lg="3">
                        <MCard>
                            <MCardTitle Class="subheading font-weight-bold">
                                @item.Email
                            </MCardTitle>

                            <MDivider/>

                            <MList Dense>
                                @foreach (var key in UserDto.Keys)
                                {
                                    <MListItem>
                                        <MListItemContent>
                                            @(key + ":")
                                        </MListItemContent>
                                        <MListItemContent Class="align-end">
                                            @item.GetValue(key)
                                        </MListItemContent>
                                    </MListItem>
                                }
                            </MList>
                            <MCardActions>
                                <MButtonGroup Dense>
                                    <MButton Text Color="primary" OnClick="@(() => ChangePassword(item))">
                                        更改密码
                                    </MButton>
                                    <MButton Text Color="primary" OnClick="@(() => EditUser(item))">
                                        编辑
                                    </MButton>
                                </MButtonGroup>
                            </MCardActions>
                        </MCard>
                    </MCol>
                }
            </MRow>
        </ChildContent>
    </MDataIterator>
</MContainer>
<Snackbar @ref="_snackbar"/>
<PModal></PModal>

@code {

    [Parameter]
    private PanelState PanelState { get; set; } = new();

    private int _itemsPerPage = 8;

    private string _searchString = "";

    private bool _isLoading;

    private Snackbar? _snackbar;

    private static IList<SelectItem> Keys => new List<SelectItem>()
    {
        new("邮箱", QueryUserDto.QueryType.Email),
        new("联系方式", QueryUserDto.QueryType.Contact),
        new("用户名", QueryUserDto.QueryType.Username)
    };

    private async void ChangePassword(UserDto userDto)
    {
    }

    private async void EditUser(UserDto userDto)
    {
    }

    private async void Search()
    {
        if (_searchString == "")
        {
            _snackbar?.Show("查询信息不能为空");
            return;
        }
        _isLoading = true;
        QueryUserDto queryUserDto = new()
        {
            Type = PanelState.QueryType,
            Website = PanelState.Website
        };
        switch (PanelState.QueryType)
        {
            case QueryUserDto.QueryType.Id:
                queryUserDto.Id = int.Parse(_searchString);
                break;
            case QueryUserDto.QueryType.Email:
                queryUserDto.Email = _searchString;
                break;
            case QueryUserDto.QueryType.Contact:
                queryUserDto.Contact = _searchString;
                break;
            case QueryUserDto.QueryType.Username:
                queryUserDto.UserName = _searchString;
                break;
            default:
                _isLoading = false;
                StateHasChanged();
                return;
        }
        PanelState.Users = await ManageClient.FindUser(queryUserDto);
        _isLoading = false;
        StateHasChanged();
    }

    class SelectItem
    {
        public string Label { get; }

        public QueryUserDto.QueryType Type { get; }

        public SelectItem(string label, QueryUserDto.QueryType type)
        {
            Label = label;
            Type = type;
        }
    }

}