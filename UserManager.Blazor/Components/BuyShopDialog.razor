@using BlazorComponent
@using Masa.Blazor.Presets
@using UserManager.Blazor.Client
@inject ManageClient ManageClient

<MDialog @bind-Value="_open" Scrollable="true" MaxWidth="500">
    <ChildContent>
        <MCard>
            <MCardTitle Class="text-h5">
                购买套餐
            </MCardTitle>
            <MCardSubtitle>
                @_userDto.Email
            </MCardSubtitle>
            <MDivider/>
            <MCardText>
                <MSelect Items="_shopDtos"
                         ItemText="u => u.Name"
                         ItemValue="u => u.Name"
                         TValue="string"
                         TItemValue="string"
                         TItem="ShopDto"
                         OnSelectedItemUpdate="item => _selectedShopDto = item"/>
                <MSpacer/>
                <MButton Loading="_loadingBuy" Color="primary" OnClick="Buy">购买</MButton>
                <MButton Loading="_loadingRestore" Color="primary" OnClick="RestoreBought">处理刚买套餐无流量</MButton>
                <MButton Loading="_loadingUpgrade" Color="primary" OnClick="Upgrade">变更套餐</MButton>
                <MButton Loading="_loadingGap" Color="primary" OnClick="QueryGap">查询差价</MButton>
            </MCardText>
            <MCardActions>
                <MSpacer/>
                <MButton Color="red darken-1" Text="true" OnClick="() => _open = false">Cancel</MButton>
            </MCardActions>
        </MCard>
    </ChildContent>
</MDialog>

<Snackbar @ref="_snackbar"/>

@code {

    private bool _open;

    private bool _loadingBuy;

    private bool _loadingRestore;

    private bool _loadingUpgrade;

    private bool _loadingGap;

    private UserDto _userDto;

    private Snackbar? _snackbar;

    private IList<ShopDto> _shopDtos;

    private Action<string, UserDto, bool>? _callback;

    private ShopDto? _selectedShopDto;

    private List<DataTableHeader<BoughtDto>> _headers = new()
    {
        new DataTableHeader<BoughtDto>() { Text = "套餐名字", Value = nameof(BoughtDto.ShopName) },
        new DataTableHeader<BoughtDto>() { Text = "购买时间", Value = nameof(BoughtDto.DatetimeString) },
        new DataTableHeader<BoughtDto>() { Text = "价钱", Value = nameof(BoughtDto.Price) },
        new DataTableHeader<BoughtDto>() { Text = "自动续费时间", Value = nameof(BoughtDto.RenewStr) },
        new DataTableHeader<BoughtDto>() { Text = "Actions", Value = "actions", Sortable = false, Width = "100px", Align = "center" }
    };

    public void Show(UserDto userDto, IList<ShopDto> boughtDtos, Action<string, UserDto, bool>? callback = null)
    {
        _open = true;
        _userDto = userDto;
        _callback = callback;
        _shopDtos = boughtDtos;
        StateHasChanged();
    }

    private async void Buy()
    {
        if (_selectedShopDto == null)
        {
            _snackbar?.Show("所选套餐为空");
            return;
        }

        _loadingBuy = true;
        var res = await ManageClient.BuyShop(new BuyShopDto() { ShopId = _selectedShopDto!.Id, UserId = _userDto.Id, UserEmail = _userDto.Email, Website = _userDto.Website });
        if (res.IsSuccess)
        {
            _open = false;
            _loadingBuy = false;
            StateHasChanged();
            _callback?.Invoke("购买成功", _userDto, true);
            return;
        }
        _loadingBuy = false;
        StateHasChanged();
        _snackbar?.Show("购买失败: " + res.Message);
    }

    private async void Upgrade()
    {
        if (_selectedShopDto == null)
        {
            _snackbar?.Show("所选套餐为空");
            return;
        }
        _loadingUpgrade = true;
        var res = await ManageClient.Upgrade(new BuyShopDto() { ShopId = _selectedShopDto!.Id, UserId = _userDto.Id, UserEmail = _userDto.Email, Website = _userDto.Website });
        if (res.IsSuccess)
        {
            _open = false;
            _loadingUpgrade = false;
            StateHasChanged();
            _callback?.Invoke("购买成功", _userDto, true);
            return;
        }
        _loadingUpgrade = false;
        StateHasChanged();
        _snackbar?.Show("购买失败: " + res.Message);
    }

    private async void QueryGap()
    {
        if (_selectedShopDto == null)
        {
            _snackbar?.Show("所选套餐为空");
            return;
        }
        _loadingGap = true;
        var res = await ManageClient.Upgrade(new BuyShopDto() { ShopId = _selectedShopDto!.Id, UserId = _userDto.Id, UserEmail = _userDto.Email, IsQueryGap = true, Website = _userDto.Website });
        if (res.IsSuccess)
        {
            _callback?.Invoke(res.Message!, _userDto, true);
            _loadingGap = false;
            StateHasChanged();
            return;
        }
        _loadingGap = false;
        StateHasChanged();
        _snackbar?.Show("查询失败: " + res.Message);
    }

    private async void RestoreBought()
    {
        _loadingRestore = true;
        var res = await ManageClient.RestoreBought(new RestoreBoughtDto() { UserEmail = _userDto!.Email, UserId = _userDto!.Id, Website = _userDto.Website });
        if (res.IsSuccess)
        {
            _open = false;
            _loadingRestore = false;
            StateHasChanged();
            _callback?.Invoke("操作成功", _userDto, true);
            return;
        }
        _loadingRestore = false;
        StateHasChanged();
        _snackbar?.Show("操作失败: " + res.Message);
    }


}