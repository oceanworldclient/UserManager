@inject ManageClient ManageClient
@inject Notify Notify

<Modal Maximizable="@true" ConfirmLoading="_loading" Title="编辑用户信息" Visible="_visible" OnCancel="() => _visible = false" OnOk="OnSave">
    <Form TModel="UserDto" Model="_user" LabelColSpan="8" >
        <FormItem Label="用户等级">
            <AntDesign.Input TValue="int" @bind-Value="@_user.Class"/>
        </FormItem>
        <FormItem Label="用户总流量(GB)">
            <AntDesign.Input TValue="double" @bind-Value="@_user.TotalInGb"/>
        </FormItem>
        <FormItem Label="等级到期时间">
            <AntDesign.Input TValue="string" @bind-Value="@_user.ClassExpireStr"/>
        </FormItem>
        <FormItem Label="用户分组">
            <AntDesign.Input TValue="int" @bind-Value="@_user.NodeGroup"/>
        </FormItem>
        <FormItem Label="用户分组到期时间">
            <AntDesign.Input TValue="string" @bind-Value="@_user.GroupExpireStr"/>
        </FormItem>
    </Form>
</Modal>


@code {

    private UserDto _user = new();

    private bool _loading;

    private bool _visible;

    private Action? _callback;

    private async void OnSave()
    {
        _loading = true;
        var saveUser = await ManageClient.SaveUser(_user);
        if (saveUser)
        {
            Notify.NoticeWithIcon("Info", "保存成功", NotificationType.Success);
            _visible = false;
            StateHasChanged();
            _callback?.Invoke();
            return;
        }
        Notify.NoticeWithIcon("Error", "保存失败", NotificationType.Error);
        _loading = false;
        StateHasChanged();
    }

    public void Show(UserDto userDto, Action? action)
    {
        _user = userDto;
        _callback = action;
        _visible = true;
        StateHasChanged();
    }

}